import java.util.Scanner;

public class Queue {
    private int[] queueArray;
    private int front;
    private int rear;
    private int maxSize;
    private int currentSize;

    // Constructor to initialize the queue
    public Queue(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = 0;
        rear = -1;
        currentSize = 0;
    }

    // Enqueue operation: adds an element to the rear of the queue
    public void enqueue(int value) {
        if (currentSize == maxSize) {
            System.out.println("Queue is full! Can't enqueue more elements.");
        } else {
            rear = (rear + 1) % maxSize; // Circular increment
            queueArray[rear] = value;
            currentSize++;
            System.out.println("Enqueued: " + value);
        }
    }

    // Dequeue operation: removes and returns the front element
    public int dequeue() {
        if (currentSize == 0) {
            System.out.println("Queue is empty! Can't dequeue elements.");
            return -1;
        } else {
            int value = queueArray[front];
            front = (front + 1) % maxSize; // Circular increment
            currentSize--;
            return value;
        }
    }

    // Peek operation: returns the front element without removing it
    public int peek() {
        if (currentSize == 0) {
            System.out.println("Queue is empty.");
            return -1;
        } else {
            return queueArray[front];
        }
    }

    // Delete operation: removes a specific element
    public void delete(int value) {
        if (currentSize == 0) {
            System.out.println("Queue is empty! Nothing to delete.");
            return;
        }

        boolean found = false;
        int deleteCount = 0;

        for (int i = 0; i < currentSize; i++) {
            int currentIndex = (front + i) % maxSize;
            if (queueArray[currentIndex] == value) {
                found = true;
                deleteCount++;
                System.out.println("Deleted element: " + value);
            } else {
                queueArray[(front + i - deleteCount) % maxSize] = queueArray[currentIndex];
            }
        }

        if (!found) {
            System.out.println("Element not found in queue.");
        } else {
            currentSize -= deleteCount; // Adjust current size after deletion
            rear = (front + currentSize - 1) % maxSize; // Adjust rear
        }
    }

    // Display the queue from left to right (with spaces)
    public void display() {
        if (currentSize == 0) {
            System.out.println("Queue is empty.");
        } else {
            System.out.print("Queue (left to right): ");
            for (int i = 0; i < currentSize; i++) {
                System.out.print(queueArray[(front + i) % maxSize]);
                if (i < currentSize - 1) {
                    System.out.print(" "); // Print space between elements
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter queue size: ");
        int size = scanner.nextInt();
        Queue queue = new Queue(size);

        int choice, value;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Delete");
            System.out.println("5. Display");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to enqueue: ");
                    value = scanner.nextInt();
                    queue.enqueue(value);
                    break;
                case 2:
                    int dequeuedValue = queue.dequeue();
                    if (dequeuedValue != -1) {
                        System.out.println("Dequeued element: " + dequeuedValue);
                    }
                    break;
                case 3:
                    int frontElement = queue.peek();
                    if (frontElement != -1) {
                        System.out.println("Front element: " + frontElement);
                    }
                    break;
                case 4:
                    System.out.print("Enter value to delete: ");
                    value = scanner.nextInt();
                    queue.delete(value);
                    break;
                case 5:
                    queue.display();
                    break;
                case 6:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 6);

        scanner.close();
    }
}
